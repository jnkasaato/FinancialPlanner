{"ast":null,"code":"import React, { useState } from 'react';\nfunction Summary({\n  sampleTransactions,\n  transactions\n}) {\n  // Get the current date\n  const currentDate = new Date();\n\n  // Get the first day of the current month\n  const firstDayOfMonth = new Date(currentDate.getFullYear(), currentDate.getMonth(), 1);\n\n  // Get the last day of the current month\n  const lastDayOfMonth = new Date(currentDate.getFullYear(), currentDate.getMonth() + 1, 0);\n\n  // Filter transactions for the current month\n  const currentMonthTransactions = sampleTransactions.filter(transaction => {\n    const transactionDate = new Date(transaction.date);\n    return transactionDate >= firstDayOfMonth && transactionDate <= lastDayOfMonth;\n  });\n\n  // Group transactions by category and calculate total amount for each category\n  const expenseSummary = {};\n  currentMonthTransactions.forEach(transaction => {\n    if (transaction.type === 'expense') {\n      if (!expenseSummary[transaction.category]) {\n        expenseSummary[transaction.category] = 0;\n      }\n      expenseSummary[transaction.category] += transaction.amount;\n    }\n  });\n  console.log(expenseSummary);\n}\n_c = Summary;\nexport default Summary;\nvar _c;\n$RefreshReg$(_c, \"Summary\");","map":{"version":3,"names":["React","useState","Summary","sampleTransactions","transactions","currentDate","Date","firstDayOfMonth","getFullYear","getMonth","lastDayOfMonth","currentMonthTransactions","filter","transaction","transactionDate","date","expenseSummary","forEach","type","category","amount","console","log","_c","$RefreshReg$"],"sources":["/Users/jordanakasaato/Documents/Projects/finances/src/components/Summary.js"],"sourcesContent":["import React, { useState } from 'react';\n\n\nfunction Summary({ sampleTransactions, transactions }) {\n\n\n// Get the current date\nconst currentDate = new Date();\n\n// Get the first day of the current month\nconst firstDayOfMonth = new Date(currentDate.getFullYear(), currentDate.getMonth(), 1);\n\n// Get the last day of the current month\nconst lastDayOfMonth = new Date(currentDate.getFullYear(), currentDate.getMonth() + 1, 0);\n\n// Filter transactions for the current month\nconst currentMonthTransactions = sampleTransactions.filter(transaction => {\n  const transactionDate = new Date(transaction.date);\n  return transactionDate >= firstDayOfMonth && transactionDate <= lastDayOfMonth;\n});\n\n// Group transactions by category and calculate total amount for each category\nconst expenseSummary = {};\ncurrentMonthTransactions.forEach(transaction => {\n  if (transaction.type === 'expense') {\n    if (!expenseSummary[transaction.category]) {\n      expenseSummary[transaction.category] = 0;\n    }\n    expenseSummary[transaction.category] += transaction.amount;\n  }\n});\n\nconsole.log(expenseSummary);\n\n}\n\nexport default Summary;"],"mappings":"AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AAGvC,SAASC,OAAOA,CAAC;EAAEC,kBAAkB;EAAEC;AAAa,CAAC,EAAE;EAGvD;EACA,MAAMC,WAAW,GAAG,IAAIC,IAAI,CAAC,CAAC;;EAE9B;EACA,MAAMC,eAAe,GAAG,IAAID,IAAI,CAACD,WAAW,CAACG,WAAW,CAAC,CAAC,EAAEH,WAAW,CAACI,QAAQ,CAAC,CAAC,EAAE,CAAC,CAAC;;EAEtF;EACA,MAAMC,cAAc,GAAG,IAAIJ,IAAI,CAACD,WAAW,CAACG,WAAW,CAAC,CAAC,EAAEH,WAAW,CAACI,QAAQ,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC;;EAEzF;EACA,MAAME,wBAAwB,GAAGR,kBAAkB,CAACS,MAAM,CAACC,WAAW,IAAI;IACxE,MAAMC,eAAe,GAAG,IAAIR,IAAI,CAACO,WAAW,CAACE,IAAI,CAAC;IAClD,OAAOD,eAAe,IAAIP,eAAe,IAAIO,eAAe,IAAIJ,cAAc;EAChF,CAAC,CAAC;;EAEF;EACA,MAAMM,cAAc,GAAG,CAAC,CAAC;EACzBL,wBAAwB,CAACM,OAAO,CAACJ,WAAW,IAAI;IAC9C,IAAIA,WAAW,CAACK,IAAI,KAAK,SAAS,EAAE;MAClC,IAAI,CAACF,cAAc,CAACH,WAAW,CAACM,QAAQ,CAAC,EAAE;QACzCH,cAAc,CAACH,WAAW,CAACM,QAAQ,CAAC,GAAG,CAAC;MAC1C;MACAH,cAAc,CAACH,WAAW,CAACM,QAAQ,CAAC,IAAIN,WAAW,CAACO,MAAM;IAC5D;EACF,CAAC,CAAC;EAEFC,OAAO,CAACC,GAAG,CAACN,cAAc,CAAC;AAE3B;AAACO,EAAA,GA/BQrB,OAAO;AAiChB,eAAeA,OAAO;AAAC,IAAAqB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}