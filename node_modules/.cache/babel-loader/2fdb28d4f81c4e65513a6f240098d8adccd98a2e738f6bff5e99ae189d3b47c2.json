{"ast":null,"code":"var _jsxFileName = \"/Users/jordanakasaato/Documents/Projects/finances/src/components/Overview.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from 'react';\nimport { Chart, CategoryScale, LinearScale, BarController, BarElement, Tooltip } from 'chart.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChart.register(CategoryScale, LinearScale, BarController, BarElement, Tooltip);\nfunction Overview({\n  sampleTransactions,\n  transactions\n}) {\n  _s();\n  const chartRef = useRef(null);\n  const chartInstanceRef = useRef(null);\n  const [timePeriod, setTimePeriod] = useState('yeartodate');\n  useEffect(() => {\n    if (chartRef.current) {\n      if (chartInstanceRef.current) {\n        chartInstanceRef.current.destroy();\n      }\n      const ctx = chartRef.current.getContext('2d');\n\n      // Calculate the start date based on the selected time period\n      let startDate = new Date();\n      if (timePeriod === '1month') {\n        startDate.setMonth(startDate.getMonth() - 1);\n      } else if (timePeriod === '3months') {\n        startDate.setMonth(startDate.getMonth() - 2);\n      } else if (timePeriod === '6months') {\n        startDate.setMonth(startDate.getMonth() - 5);\n      } else if (timePeriod === 'yeartodate') {\n        startDate = new Date(startDate.getFullYear(), 0, 1);\n      }\n\n      // Filter transactions based on the selected time period\n      const filteredTransactions = transactions.filter(transaction => new Date(transaction.date) >= startDate);\n\n      // Group transactions by month and calculate total Income and expenses for each month\n      var groupedData = filteredTransactions.reduce((acc, transaction) => {\n        var date = new Date(transaction.date);\n        var month = date.getMonth(); // Month is 0-indexed (0: January, 1: February, ...)\n\n        if (!acc[month]) {\n          acc[month] = {\n            Income: 0,\n            expenses: 0\n          };\n        }\n        if (transaction.type === 'Income') {\n          acc[month].Income += transaction.amount;\n        } else if (transaction.type === 'expense') {\n          acc[month].expenses += transaction.amount;\n        }\n        return acc;\n      }, []);\n      const months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\n      const IncomeData = months.map((month, index) => {\n        var _groupedData$index;\n        return ((_groupedData$index = groupedData[index]) === null || _groupedData$index === void 0 ? void 0 : _groupedData$index.Income) || 0;\n      });\n      const expenseData = months.map((month, index) => {\n        var _groupedData$index2;\n        return ((_groupedData$index2 = groupedData[index]) === null || _groupedData$index2 === void 0 ? void 0 : _groupedData$index2.expenses) || 0;\n      });\n      chartInstanceRef.current = new Chart(ctx, {\n        type: 'bar',\n        data: {\n          labels: months,\n          datasets: [{\n            label: 'Income',\n            data: IncomeData,\n            backgroundColor: '#4bbad8',\n            barThickness: 25\n          }, {\n            label: 'Expenses',\n            data: expenseData,\n            backgroundColor: '#e6813d',\n            barThickness: 25\n          }]\n        },\n        options: {\n          y: {\n            grid: {\n              display: false\n            },\n            ticks: {\n              ticks: {\n                color: '#00ff00',\n                beginAtZero: true\n              },\n              font: {\n                family: 'Quicksand',\n                size: 16,\n                weight: 'bold'\n              }\n            }\n          },\n          x: {\n            grid: {\n              display: false\n            }\n          },\n          scales: {\n            y: {\n              beginAtZero: true,\n              grid: {\n                display: false\n              }\n            }\n          },\n          plugins: {\n            legend: {\n              display: true\n            }\n          },\n          // Set font properties for the scale label (months)\n          scales: {\n            x: {\n              grid: {\n                display: false\n              },\n              ticks: {\n                font: {\n                  family: 'Quicksand',\n                  size: 16,\n                  weight: 'bold'\n                }\n              }\n            }\n          }\n        }\n      });\n    }\n  }, [timePeriod, transactions]); // Add timePeriod and transactions as dependencies\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"overview\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"split-header header \",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Overview\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"overview__chart-controls\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"overview__chart-container\",\n      children: /*#__PURE__*/_jsxDEV(\"canvas\", {\n        ref: chartRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 141,\n    columnNumber: 5\n  }, this);\n}\n_s(Overview, \"v7QVkm71A88QOYjdbR48bG8XaMg=\");\n_c = Overview;\nexport default Overview;\nvar _c;\n$RefreshReg$(_c, \"Overview\");","map":{"version":3,"names":["React","useEffect","useRef","useState","Chart","CategoryScale","LinearScale","BarController","BarElement","Tooltip","jsxDEV","_jsxDEV","register","Overview","sampleTransactions","transactions","_s","chartRef","chartInstanceRef","timePeriod","setTimePeriod","current","destroy","ctx","getContext","startDate","Date","setMonth","getMonth","getFullYear","filteredTransactions","filter","transaction","date","groupedData","reduce","acc","month","Income","expenses","type","amount","months","IncomeData","map","index","_groupedData$index","expenseData","_groupedData$index2","data","labels","datasets","label","backgroundColor","barThickness","options","y","grid","display","ticks","color","beginAtZero","font","family","size","weight","x","scales","plugins","legend","className","children","fileName","_jsxFileName","lineNumber","columnNumber","ref","_c","$RefreshReg$"],"sources":["/Users/jordanakasaato/Documents/Projects/finances/src/components/Overview.js"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\nimport { Chart, CategoryScale, LinearScale, BarController, BarElement, Tooltip } from 'chart.js';\n\nChart.register(CategoryScale, LinearScale, BarController, BarElement, Tooltip);\n\nfunction Overview({ sampleTransactions, transactions }) {\n  const chartRef = useRef(null);\n  const chartInstanceRef = useRef(null);\n  const [timePeriod, setTimePeriod] = useState('yeartodate');\n\n  useEffect(() => {\n  if (chartRef.current) {\n    if (chartInstanceRef.current) {\n      chartInstanceRef.current.destroy();\n    }\n\n    const ctx = chartRef.current.getContext('2d');\n\n    // Calculate the start date based on the selected time period\n    let startDate = new Date();\n    if (timePeriod === '1month') {\n      startDate.setMonth(startDate.getMonth() - 1);\n    } else if (timePeriod === '3months') {\n      startDate.setMonth(startDate.getMonth() - 2);\n    } else if (timePeriod === '6months') {\n      startDate.setMonth(startDate.getMonth() - 5);\n    } else if (timePeriod === 'yeartodate') {\n      startDate = new Date(startDate.getFullYear(), 0, 1);\n    }\n\n    // Filter transactions based on the selected time period\n    const filteredTransactions = transactions.filter(\n      (transaction) => new Date(transaction.date) >= startDate\n    );\n\n    // Group transactions by month and calculate total Income and expenses for each month\n    var groupedData = filteredTransactions.reduce((acc, transaction) => {\n      var date = new Date(transaction.date);\n      var month = date.getMonth(); // Month is 0-indexed (0: January, 1: February, ...)\n\n      if (!acc[month]) {\n        acc[month] = { Income: 0, expenses: 0 };\n      }\n\n      if (transaction.type === 'Income') {\n        acc[month].Income += transaction.amount;\n      } else if (transaction.type === 'expense') {\n        acc[month].expenses += transaction.amount;\n      }\n\n      return acc;\n    }, []);\n\n    const months = [\n      'Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun','Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\n\n    const IncomeData = months.map((month, index) => groupedData[index]?.Income || 0);\n    const expenseData = months.map((month, index) => groupedData[index]?.expenses || 0);\n\n    chartInstanceRef.current = new Chart(ctx, {\n      type: 'bar',\n        data: {\n          labels: months,\n          datasets: [\n            {\n              label: 'Income',\n              data: IncomeData,\n              backgroundColor: '#4bbad8',\n              barThickness: 25,\n            },\n            {\n              label: 'Expenses',\n              data: expenseData,\n              backgroundColor: '#e6813d',\n              barThickness: 25,\n            },\n          ],\n        },\n        options: {\n          y:{\n            grid: {\n              display: false, \n            },\n            ticks: {\n\n              ticks:{ \n                color: '#00ff00', \n                beginAtZero: true,\n\n              },\n              font: {\n                family: 'Quicksand',\n                size: 16, \n                weight: 'bold', \n\n\n              },\n            },\n          },\n          x:{\n            grid: {\n              display: false, \n            },\n          },\n\n          scales: {\n            y: {\n              beginAtZero: true,\n              grid: {\n                display: false, \n              },\n            },\n          },\n          plugins: {\n            legend: {\n              display: true,\n            },\n          },\n          // Set font properties for the scale label (months)\n          scales: {\n            x: { \n              grid: {\n                display: false, \n              },\n              ticks: {\n                font: {\n                  family: 'Quicksand',\n                  size: 16, \n                  weight: 'bold', \n                },\n              },\n            },\n          },\n        },\n      });\n    }\n}, [timePeriod, transactions]); // Add timePeriod and transactions as dependencies\n\n\nreturn (\n    <div className=\"overview\">\n      <div className=\"split-header header \">\n        <h1>Overview</h1>\n        <div className=\"overview__chart-controls\">\n        </div>\n      </div>\n\n      <div className=\"overview__chart-container\" >\n        <canvas ref={chartRef} />\n      </div>\n    </div>\n  );\n}\n\n\nexport default Overview;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}