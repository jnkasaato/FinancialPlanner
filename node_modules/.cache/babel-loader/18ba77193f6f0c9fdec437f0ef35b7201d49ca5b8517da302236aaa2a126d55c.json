{"ast":null,"code":"//add expenses \nconst daysAgo = 365;\nconst getRandomDate = daysAgo => {\n  const today = new Date();\n  const randomDay = Math.floor(Math.random() * daysAgo);\n  const date = new Date(today);\n  date.setDate(today.getDate() - randomDay);\n  return date;\n};\nconst getRandomAmount = (min, max) => {\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n};\nconst unorderedTransactions = [];\nconst categories = ['Groceries', 'Dinner', 'Takeout', 'Shopping', 'Entertainment', 'Bills', 'Savings', 'Gas Station', 'Donations', 'Home Maintenance', 'Subscriptions', 'Health/Fitness', 'Pet Care', 'Gift'];\nconst necessityLevels = ['Essential', 'Optional', 'Savings'];\nfor (let i = 0; i < 300; i++) {\n  const category = categories[Math.floor(Math.random() * categories.length)];\n  const necessity = necessityLevels[Math.floor(Math.random() * necessityLevels.length)];\n  const amount = getRandomAmount(10, 500);\n  const description = `${category}`;\n  const date = getRandomDate(daysAgo);\n  const type = 'expense';\n  unorderedTransactions.push({\n    type,\n    amount,\n    description,\n    date,\n    necessity,\n    category\n  });\n}\nfor (let i = 0; i < 250; i++) {\n  const type = 'Income';\n  const category = 'Income';\n  const description = 'Income';\n  const necessity = '';\n  const date = getRandomDate(daysAgo);\n  const amount = getRandomAmount(300, 600);\n  unorderedTransactions.push({\n    type,\n    amount,\n    description,\n    date,\n    necessity,\n    category\n  });\n}\nconst sampleTransactions = unorderedTransactions.slice().sort((a, b) => {\n  return new Date(b.date) - new Date(a.date);\n});\nexport default sampleTransactions;","map":{"version":3,"names":["daysAgo","getRandomDate","today","Date","randomDay","Math","floor","random","date","setDate","getDate","getRandomAmount","min","max","unorderedTransactions","categories","necessityLevels","i","category","length","necessity","amount","description","type","push","sampleTransactions","slice","sort","a","b"],"sources":["/Users/jordanakasaato/Documents/Projects/finances/src/components/sampleTransactions.js"],"sourcesContent":["//add expenses \nconst daysAgo = 365;\n\nconst getRandomDate = (daysAgo) => {\n  const today = new Date();\n  const randomDay = Math.floor(Math.random() * daysAgo);\n  const date = new Date(today);\n  date.setDate(today.getDate() - randomDay);\n  return date;\n};\n\nconst getRandomAmount = (min, max) => {  return Math.floor(Math.random() * (max - min + 1)) + min;\n};\n\nconst unorderedTransactions = [];\nconst categories = ['Groceries', 'Dinner' , 'Takeout','Shopping', 'Entertainment', 'Bills', 'Savings', 'Gas Station', 'Donations', 'Home Maintenance', 'Subscriptions', 'Health/Fitness', 'Pet Care', 'Gift'];\nconst necessityLevels = ['Essential', 'Optional', 'Savings'];\n\nfor (let i = 0; i < 300; i++) {\n  const category = categories[Math.floor(Math.random() * categories.length)];\n  const necessity = necessityLevels[Math.floor(Math.random() * necessityLevels.length)];\n  const amount = getRandomAmount(10, 500);\n  const description = `${category}`;\n  const date = getRandomDate(daysAgo);\n  const type = 'expense';\n\n  unorderedTransactions.push({\n    type,\n    amount,\n    description,\n    date,\n    necessity,\n    category,\n  });\n}\n\nfor (let i = 0; i < 250; i++) {\n  const type = 'Income';\n  const category = 'Income';\n  const description = 'Income';\n  const necessity = '';\n  const date = getRandomDate(daysAgo);\n  const amount = getRandomAmount(300, 600);\n\n  unorderedTransactions.push({\n    type,\n    amount,\n    description,\n    date,\n    necessity,\n    category,\n  });\n}\n\nconst sampleTransactions = unorderedTransactions.slice().sort((a, b) => {\n  return new Date(b.date) - new Date(a.date);\n});\n\nexport default sampleTransactions;\n"],"mappings":"AAAA;AACA,MAAMA,OAAO,GAAG,GAAG;AAEnB,MAAMC,aAAa,GAAID,OAAO,IAAK;EACjC,MAAME,KAAK,GAAG,IAAIC,IAAI,CAAC,CAAC;EACxB,MAAMC,SAAS,GAAGC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAGP,OAAO,CAAC;EACrD,MAAMQ,IAAI,GAAG,IAAIL,IAAI,CAACD,KAAK,CAAC;EAC5BM,IAAI,CAACC,OAAO,CAACP,KAAK,CAACQ,OAAO,CAAC,CAAC,GAAGN,SAAS,CAAC;EACzC,OAAOI,IAAI;AACb,CAAC;AAED,MAAMG,eAAe,GAAGA,CAACC,GAAG,EAAEC,GAAG,KAAK;EAAG,OAAOR,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,IAAIM,GAAG,GAAGD,GAAG,GAAG,CAAC,CAAC,CAAC,GAAGA,GAAG;AACjG,CAAC;AAED,MAAME,qBAAqB,GAAG,EAAE;AAChC,MAAMC,UAAU,GAAG,CAAC,WAAW,EAAE,QAAQ,EAAG,SAAS,EAAC,UAAU,EAAE,eAAe,EAAE,OAAO,EAAE,SAAS,EAAE,aAAa,EAAE,WAAW,EAAE,kBAAkB,EAAE,eAAe,EAAE,gBAAgB,EAAE,UAAU,EAAE,MAAM,CAAC;AAC7M,MAAMC,eAAe,GAAG,CAAC,WAAW,EAAE,UAAU,EAAE,SAAS,CAAC;AAE5D,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,GAAG,EAAEA,CAAC,EAAE,EAAE;EAC5B,MAAMC,QAAQ,GAAGH,UAAU,CAACV,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAGQ,UAAU,CAACI,MAAM,CAAC,CAAC;EAC1E,MAAMC,SAAS,GAAGJ,eAAe,CAACX,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAGS,eAAe,CAACG,MAAM,CAAC,CAAC;EACrF,MAAME,MAAM,GAAGV,eAAe,CAAC,EAAE,EAAE,GAAG,CAAC;EACvC,MAAMW,WAAW,GAAI,GAAEJ,QAAS,EAAC;EACjC,MAAMV,IAAI,GAAGP,aAAa,CAACD,OAAO,CAAC;EACnC,MAAMuB,IAAI,GAAG,SAAS;EAEtBT,qBAAqB,CAACU,IAAI,CAAC;IACzBD,IAAI;IACJF,MAAM;IACNC,WAAW;IACXd,IAAI;IACJY,SAAS;IACTF;EACF,CAAC,CAAC;AACJ;AAEA,KAAK,IAAID,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,GAAG,EAAEA,CAAC,EAAE,EAAE;EAC5B,MAAMM,IAAI,GAAG,QAAQ;EACrB,MAAML,QAAQ,GAAG,QAAQ;EACzB,MAAMI,WAAW,GAAG,QAAQ;EAC5B,MAAMF,SAAS,GAAG,EAAE;EACpB,MAAMZ,IAAI,GAAGP,aAAa,CAACD,OAAO,CAAC;EACnC,MAAMqB,MAAM,GAAGV,eAAe,CAAC,GAAG,EAAE,GAAG,CAAC;EAExCG,qBAAqB,CAACU,IAAI,CAAC;IACzBD,IAAI;IACJF,MAAM;IACNC,WAAW;IACXd,IAAI;IACJY,SAAS;IACTF;EACF,CAAC,CAAC;AACJ;AAEA,MAAMO,kBAAkB,GAAGX,qBAAqB,CAACY,KAAK,CAAC,CAAC,CAACC,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAK;EACtE,OAAO,IAAI1B,IAAI,CAAC0B,CAAC,CAACrB,IAAI,CAAC,GAAG,IAAIL,IAAI,CAACyB,CAAC,CAACpB,IAAI,CAAC;AAC5C,CAAC,CAAC;AAEF,eAAeiB,kBAAkB"},"metadata":{},"sourceType":"module","externalDependencies":[]}