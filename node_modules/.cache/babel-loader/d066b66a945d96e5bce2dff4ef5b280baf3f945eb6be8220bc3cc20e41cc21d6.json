{"ast":null,"code":"var _jsxFileName = \"/Users/jordanakasaato/Documents/Projects/finances/src/components/Overview.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from 'react';\nimport { Chart, CategoryScale, LinearScale, BarController, BarElement, Tooltip } from 'chart.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChart.register(CategoryScale, LinearScale, BarController, BarElement, Tooltip);\nfunction Overview({\n  transactions\n}) {\n  _s();\n  const chartRef = useRef(null);\n  const chartInstanceRef = useRef(null);\n  useEffect(() => {\n    if (chartRef.current) {\n      if (chartInstanceRef.current) {\n        chartInstanceRef.current.destroy();\n      }\n      const ctx = chartRef.current.getContext('2d');\n\n      // Calculate the end date as the current month\n      const today = new Date();\n      const endDate = new Date(today.getFullYear(), today.getMonth() + 1, 0); // Last day of the current month\n\n      // Calculate the start date for the previous 12 months\n      const startDate = new Date(today.getFullYear(), today.getMonth() - 11, 1); // First day of the 12th month ago\n\n      // Generate the labels for the previous 12 months\n      const labels = [];\n      for (let i = 0; i < 12; i++) {\n        const date = new Date(startDate.getFullYear(), startDate.getMonth() + i);\n        labels.push(date.toLocaleString('default', {\n          month: 'short'\n        }));\n      }\n\n      // Filter transactions for the previous 12 months\n      const filteredTransactions = transactions.filter(transaction => {\n        const transactionDate = new Date(transaction.date);\n        return transactionDate >= startDate && transactionDate <= endDate;\n      });\n\n      // Group transactions by month and calculate total income and expenses for each month\n      const groupedData = Array.from({\n        length: 12\n      }, (_, i) => {\n        const month = (startDate.getMonth() + i) % 12;\n        return {\n          Income: filteredTransactions.filter(transaction => new Date(transaction.date).getMonth() === month && transaction.type === 'Income').reduce((acc, transaction) => acc + transaction.amount, 0),\n          expenses: filteredTransactions.filter(transaction => new Date(transaction.date).getMonth() === month && transaction.type === 'expense').reduce((acc, transaction) => acc + transaction.amount, 0)\n        };\n      });\n      const IncomeData = Array.from({\n        length: 12\n      }, (_, index) => {\n        var _groupedData$index;\n        return ((_groupedData$index = groupedData[index]) === null || _groupedData$index === void 0 ? void 0 : _groupedData$index.Income) || 0;\n      });\n      const expenseData = Array.from({\n        length: 12\n      }, (_, index) => {\n        var _groupedData$index2;\n        return ((_groupedData$index2 = groupedData[index]) === null || _groupedData$index2 === void 0 ? void 0 : _groupedData$index2.expenses) || 0;\n      });\n      chartInstanceRef.current = new Chart(ctx, {\n        type: 'bar',\n        data: {\n          labels: labels,\n          datasets: [{\n            label: 'Income',\n            data: IncomeData,\n            backgroundColor: '#b996ff',\n            barThickness: 30,\n            borderRadius: 5\n          }, {\n            label: 'Expenses',\n            data: expenseData,\n            backgroundColor: '#e0deff',\n            barThickness: 30,\n            borderRadius: 5\n          }]\n        },\n        options: {\n          maintainAspectRatio: false,\n          scales: {\n            x: {\n              grid: {\n                display: false // Hide vertical grid lines\n              },\n\n              ticks: {\n                font: {\n                  size: 15,\n                  // Set the font size for x-axis labels\n                  family: 'Quicksand'\n                }\n              }\n            },\n            y: {\n              grid: {\n                borderDash: 3 // Set dotted lines for horizontal grid\n              },\n\n              ticks: {\n                font: {\n                  size: 15,\n                  // Set the font size for x-axis labels\n                  family: 'Quicksand'\n                },\n                callback: function (value, index, values) {\n                  // Format numbers to show as 'k'\n                  if (Math.abs(value) >= 1000) {\n                    return '$' + value / 1000 + 'k';\n                  } else {\n                    return value;\n                  }\n                },\n                stepSize: 4000\n              }\n            }\n          }\n        }\n      });\n    }\n  }, [transactions]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"overview\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Overview\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"legend\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"income\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 125,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: \"Income\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 126,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"expense\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 129,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: \"Expenses\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 130,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"overview__chart-container\",\n      children: /*#__PURE__*/_jsxDEV(\"canvas\", {\n        ref: chartRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 120,\n    columnNumber: 5\n  }, this);\n}\n_s(Overview, \"0kidk2EAizBYKgfY+KQx4ULbe78=\");\n_c = Overview;\nexport default Overview;\nvar _c;\n$RefreshReg$(_c, \"Overview\");","map":{"version":3,"names":["React","useEffect","useRef","Chart","CategoryScale","LinearScale","BarController","BarElement","Tooltip","jsxDEV","_jsxDEV","register","Overview","transactions","_s","chartRef","chartInstanceRef","current","destroy","ctx","getContext","today","Date","endDate","getFullYear","getMonth","startDate","labels","i","date","push","toLocaleString","month","filteredTransactions","filter","transaction","transactionDate","groupedData","Array","from","length","_","Income","type","reduce","acc","amount","expenses","IncomeData","index","_groupedData$index","expenseData","_groupedData$index2","data","datasets","label","backgroundColor","barThickness","borderRadius","options","maintainAspectRatio","scales","x","grid","display","ticks","font","size","family","y","borderDash","callback","value","values","Math","abs","stepSize","className","children","fileName","_jsxFileName","lineNumber","columnNumber","ref","_c","$RefreshReg$"],"sources":["/Users/jordanakasaato/Documents/Projects/finances/src/components/Overview.js"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\nimport { Chart, CategoryScale, LinearScale, BarController, BarElement, Tooltip } from 'chart.js';\n\nChart.register(CategoryScale, LinearScale, BarController, BarElement, Tooltip);\n\nfunction Overview({ transactions }) {\n  const chartRef = useRef(null);\n  const chartInstanceRef = useRef(null);\n\n  useEffect(() => {\n    if (chartRef.current) {\n      if (chartInstanceRef.current) {\n        chartInstanceRef.current.destroy();\n      }\n\n      const ctx = chartRef.current.getContext('2d');\n\n      // Calculate the end date as the current month\n      const today = new Date();\n      const endDate = new Date(today.getFullYear(), today.getMonth() + 1, 0); // Last day of the current month\n\n      // Calculate the start date for the previous 12 months\n      const startDate = new Date(today.getFullYear(), today.getMonth() - 11, 1); // First day of the 12th month ago\n\n      // Generate the labels for the previous 12 months\n      const labels = [];\n      for (let i = 0; i < 12; i++) {\n        const date = new Date(startDate.getFullYear(), startDate.getMonth() + i);\n        labels.push(date.toLocaleString('default', { month: 'short' }));\n      }\n\n      // Filter transactions for the previous 12 months\n      const filteredTransactions = transactions.filter(\n        (transaction) => {\n          const transactionDate = new Date(transaction.date);\n          return transactionDate >= startDate && transactionDate <= endDate;\n        }\n      );\n\n      // Group transactions by month and calculate total income and expenses for each month\n      const groupedData = Array.from({ length: 12 }, (_, i) => {\n        const month = (startDate.getMonth() + i) % 12;\n        return {\n          Income: filteredTransactions\n            .filter(transaction => new Date(transaction.date).getMonth() === month && transaction.type === 'Income')\n            .reduce((acc, transaction) => acc + transaction.amount, 0),\n          expenses: filteredTransactions\n            .filter(transaction => new Date(transaction.date).getMonth() === month && transaction.type === 'expense')\n            .reduce((acc, transaction) => acc + transaction.amount, 0)\n        };\n      });\n\n      const IncomeData = Array.from({ length: 12 }, (_, index) => groupedData[index]?.Income || 0);\n      const expenseData = Array.from({ length: 12 }, (_, index) => groupedData[index]?.expenses || 0);\n\n      chartInstanceRef.current = new Chart(ctx, {\n        type: 'bar',\n        data: {\n          labels: labels,\n          datasets: [\n            {\n              label: 'Income',\n              data: IncomeData,\n              backgroundColor: '#b996ff',\n              barThickness: 30,\n              borderRadius: 5,\n            },\n            {\n              label: 'Expenses',\n              data: expenseData,\n              backgroundColor: '#e0deff',\n              barThickness: 30,\n              borderRadius: 5,\n            },\n          ],\n        },\n         options: {\n           maintainAspectRatio: false,\n    scales: {\n      x: {\n        grid: {\n          display: false, // Hide vertical grid lines\n        },\n        ticks: {\n          font: {\n            size: 15, // Set the font size for x-axis labels\n            family: 'Quicksand'\n          },\n        },\n\n      },\n      y: {\n        grid: {\n          borderDash: 3, // Set dotted lines for horizontal grid\n        },\n        ticks: {\n          font: {\n            size: 15, // Set the font size for x-axis labels\n            family: 'Quicksand'\n          },\n          callback: function(value, index, values) {\n            // Format numbers to show as 'k'\n            if (Math.abs(value) >= 1000) {\n              return '$' + value/1000 + 'k';\n            } else {\n              return value;\n            }\n          },\n          stepSize: 4000,\n        },\n      },\n    },\n  },\n});\n\n    }\n  }, [transactions]);\n\n  return (\n    <div className=\"overview\">\n      <div className=\"header\">\n        <h1>Overview</h1>\n        <div className=\"legend\">\n          <div className=\"income\">\n            <div></div>\n            <div>Income</div>\n          </div>\n          <div className=\"expense\">\n            <div></div>\n            <div>Expenses</div>\n          </div>\n        </div>\n        </div>\n\n      <div className=\"overview__chart-container\">\n        <canvas ref={chartRef} />\n      </div>\n    </div>\n  );\n}\n\nexport default Overview;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}